class DSU {
public:
    vector<int> rank, parent;

    DSU(int n) {
        rank.resize(n, 0);
        parent.resize(n);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }

    int findPar(int node) {
        if (parent[node] == node) return node;
        return parent[node] = findPar(parent[node]); 
    }

    void unionByRank(int u, int v) {
        int parU = findPar(u);
        int parV = findPar(v);
        if (parU == parV) return;

        if (rank[parU] > rank[parV]) {
            parent[parV] = parU; 
        } else if (rank[parV] > rank[parU]) {
            parent[parU] = parV;
        } else {
            parent[parV] = parU;
            rank[parU]++;
        }
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        DSU dsu(n);

        // Step 1: Union all connected nodes
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1 && i != j) 
                    dsu.unionByRank(i, j);
            }
        }

        // Step 2: Count the size of each component
        unordered_map<int, int> componentSize;
        for (int i = 0; i < n; i++) 
            componentSize[dsu.findPar(i)]++;

        // Step 3: Count how many initial infections exist per component
        unordered_map<int, int> infectedCount;
        for (int node : initial) 
            infectedCount[dsu.findPar(node)]++;

        // Step 4: Find the best node to remove
        int bestNode = *min_element(initial.begin(), initial.end());
        int maxSaved = 0;

        for (int node : initial) {
            int root = dsu.findPar(node);
            if (infectedCount[root] == 1) { // Only one infected node in this component
                if (componentSize[root] > maxSaved || 
                    (componentSize[root] == maxSaved && node < bestNode)) {
                    bestNode = node;
                    maxSaved = componentSize[root];
                }
            }
        }

        return bestNode;
    }
};
